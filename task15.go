package main

import "fmt"

func task15() {
	fmt.Println("------------Task 15----------------")
	someFunc()
}

var justString string

func createHugeString(l int) string {
	var str string
	for i := 0; i < 100; i++ {
		str += "日"
	}

	for i := 0; i < l; i++ {
		str += "1"
	}
	return str
}

/*
		В основе строк, также как и в основе слайсов, лежит ссылка на массив. В отличии от слайсов элементы в
	строке менять нельзя. При создании среза строки или слайса новый массив не создаётся, а созданный слайс ссылается на
	уже существующий массив с указанием len, cap и первого нужного элемента. Таким образом не требуется создавать копии
	одного массива.
*/

func someFunc() {
	v := createHugeString(1 << 8)
	fmt.Println(v, len([]byte(v)))
	justString = v[:100]
	/*
			В go строки представлены массивом байтов, а не символов. Следовательно,
		здесь происходит обрезание по байтам, что приведет к потере информации, если
		будут использованы символы Юникода.
	*/

	fmt.Println(justString, len([]byte(justString)))

	//Решением этой проблемы было введение разработчиками типа данных rune.

	c := []rune(v)
	justStringRune := string(c[:100])

	/*
			Длина в байтах увеличилась в 3 раза, поскольку на 1 символ юникода тратится 3 байта.
		Следовательно, теперь все правильно.
	*/
	fmt.Println(justStringRune, len([]byte(justStringRune)))

}
